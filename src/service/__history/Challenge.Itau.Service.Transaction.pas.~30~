unit Challenge.Itau.Service.Transaction;

interface

uses
  System.SysUtils,
  System.JSON,
  Challenge.Itau.Model.Transaction,
  Challenge.Itau.Model.Exceptions;

type
  TChallengeItauServiceTransaction = class
  private
    function ParseJSONToDouble(AKey: string; AValue: TJSONObject): Double;
    function ParseJSONToString(AKey: string; AValue: TJSONObject): string;

    procedure InsertTransaction(ATransaction: TJSONObject);
    procedure JSONSchemaValidate(AValue: TJSONObject);
  public
    procedure Insert(ATransaction: TJSONObject);
  end;

const
  cVALOR = 'valor';
  cDATA_HORA = 'dataHora';
  cBODY_KEYS: array[1..2] of string = (cVALOR, cDATA_HORA);

implementation

{ TChallengeItauServiceTransaction }

procedure TChallengeItauServiceTransaction.Insert(ATransaction: TJSONObject);
begin
  if not Assigned(ATransaction) then
    raise EJSONValidationError.Create('JSON inválido');

  JSONSchemaValidate(ATransaction);
  InsertTransaction(ATransaction);
end;

procedure TChallengeItauServiceTransaction.InsertTransaction(ATransaction: TJSONObject);
var
  LTransactionModel: TChallengeItauModelTransaction;
begin
  LTransactionModel := TChallengeItauModelTransaction.GetTransactionModel;
  LTransactionModel.Value := ParseJSONToDouble(cVALOR, ATransaction);
  LTransactionModel.SetDate(ParseJSONToString(cDATA_HORA, ATransaction));
end;

procedure TChallengeItauServiceTransaction.JSONSchemaValidate(AValue: TJSONObject);
var
  LEnumerator: TJSONPairEnumerator;
  I: Integer;
begin
  LEnumerator := AValue.GetEnumerator;
  while LEnumerator.MoveNext do
    for I := Low(cBODY_KEYS) to High(cBODY_KEYS) do
      if (AValue.GetValue(cBODY_KEYS[I]) = nil) then
        raise EValidationError.Create('Body formatting error: ' + cBODY_KEYS[I] + ' é obrigatório');
end;

function TChallengeItauServiceTransaction.ParseJSONToString(AKey: string; AValue: TJSONObject): string;
var
  LJSONValue: TJSONValue;
begin
  Result := EmptyStr;
  if AValue.TryGetValue(AKey, LJSONValue) then
    Result := LJSONValue.ToString;
end;

function TChallengeItauServiceTransaction.ParseJSONToDouble(AKey: string; AValue: TJSONObject): Double;
var
  LJSONValue: TJSONValue;
begin
  Result := 0;
  if AValue.TryGetValue(AKey, LJSONValue) then
    if LJSONValue is TJSONNumber then
      Result := TJSONNumber(LJSONValue).AsDouble;
end;

end.
